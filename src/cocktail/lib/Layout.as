package cocktail.lib {	import cocktail.core.data.dao.ProcessDAO;	import cocktail.lib.View;	import cocktail.lib.cocktail.fxml.Fxml;	import cocktail.lib.cocktail.fxml.view.FxmlView;	import cocktail.lib.view.styles.Styles;		import flash.display.Sprite;		/**	 * Cocktail Layout base class.	 * @author nybras | nybras@codeine.it	 */	public class Layout extends View 	{		private var _actions : *;		private var _controller : Controller;				private var _active_processes : Array;		private var _current_processes : Array;		private var _dead_processes : Array;				private var _process_running : ProcessDAO;		private var _process_destroying : ProcessDAO;				private var _sprite : Sprite;		private var _styles : Styles;				private var _fxml : Fxml;								/* ---------------------------------------------------------------------			BOOTING		--------------------------------------------------------------------- */				/**		 * Boot the View according the cocktail strict flow.		 * @param ctrl	Area controller.		 * @param forceLayout	Forces the layout loading process.		 */		override internal function boot ( controller : Controller ) : void		{			var fxml_path : String;						_styles = new Styles();			_actions = new Object();						_active_processes = new Array ();			_current_processes = new Array ();			_dead_processes = new Array ();						_controller = controller;			_controller.stage.addChild( _sprite = new Sprite() );						fxml_path = config.path( ".xml" ) + "views/";			fxml_path += clean_class_name.toLowerCase( ) + ".fxml";						_fxml = new FxmlView ();			_fxml.boot( _controller._preprocessor );			_fxml.load( fxml_path ).listen( _task.done( class_path + "/boot" ) );		}								/* ---------------------------------------------------------------------			ACTION's RUN & DESTROY		--------------------------------------------------------------------- */				/**		 * Run the given action.		 * @param dao	The action ( in ProcessDAO format ) to be runned.		 */		internal function run ( process : ProcessDAO ) : void		{			_active_processes.push( _process_running = process );			_task.done( class_path + "/run" );		}				/**		 * Destroy the given action.		 * @param dao	The action ( in ProcessDATxtO format ) to be destroyed.		 */		internal function destroy ( process : ProcessDAO ): void		{			var item : View;						for each ( item in _actions[ process.url ] )				item._destroy( process );		}	}}