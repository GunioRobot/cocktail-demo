package cocktail.lib.cocktail.fxml {	import cocktail.core.Index;	import cocktail.core.connectors.RequestConnector;	import cocktail.core.connectors.request.RequestEvent;	import cocktail.lib.cocktail.PreProcessor;		/**	 * Fxml base class.	 * @author nybras | nybras@codeine.it	 */	public class Fxml extends Index 	{		protected var _path : String;		protected var _structure : XML;		protected var _preprocessor : PreProcessor;				private var _complete : Function;								public function boot ( preprocessor: PreProcessor ): void		{			_preprocessor = preprocessor;		}				public function load ( url : String ) : Fxml		{			new RequestConnector().load( url, true ).listen( cache );			return this;		}				public function cache ( event: RequestEvent ): void		{			_structure = event.iLoadableFile.getData();			_load();		}				private function _load () : void		{			var cache : Function;			var node : XML;						if ( node = _structure..require[ 0 ] )			{				cache = proxy ( _cache, node );				new RequestConnector().load( node.@src, true ).listen( cache );			}			else			{				_complete ();				_complete = null;			}		}						private function _cache ( node : XML, event : RequestEvent ): void		{			var data : XML;						data = event.iLoadableFile.getData();			node.parent().replace ( node.childIndex(), data );						_load();		}								public function listen ( complete : Function ) : void		{			_complete = complete;		}	}}