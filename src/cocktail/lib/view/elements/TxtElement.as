/*	****************************************************************************
		Cocktail ActionScript Full Stack Framework. Copyright (C) 2009 Codeine.
	****************************************************************************
   
		This library is free software; you can redistribute it and/or modify
	it under the terms of the GNU Lesser General Public License as published
	by the Free Software Foundation; either version 2.1 of the License, or
	(at your option) any later version.
		
		This library is distributed in the hope that it will be useful, but
	WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
	or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
	License for more details.

		You should have received a copy of the GNU Lesser General Public License
	along with this library; if not, write to the Free Software Foundation,
	Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

	-------------------------
		Codeine
		http://codeine.it
		contact@codeine.it
	-------------------------
	
*******************************************************************************/

package cocktail.lib.view.elements {	import cocktail.core.FontHelper;	import cocktail.core.data.dao.layout.LayoutItemDAO;	import cocktail.core.data.dao.layout.LayoutTxtDAO;	import cocktail.core.data.dao.style.StyleDAO;	import cocktail.core.data.dao.style.StyleTxtDAO;	import cocktail.lib.View;	import cocktail.utils.StringUtil;		import flash.display.DisplayObject;	import flash.filters.BevelFilter;	import flash.filters.DropShadowFilter;	import flash.text.AntiAliasType;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;		/**	 * Cocktail base class for TextFields.	 * 	 * @author nybras | nybras@codeine.it	 */	public class TxtElement extends Element 	{				/* ---------------------------------------------------------------------			CORE OVERRIDE		--------------------------------------------------------------------- */				/**		 * Returns the target in wich the styles will be applied.		 * @return	The styleable target.		 */		public override function get styleable_target () : DisplayObject		{			return field;		}								/* ---------------------------------------------------------------------			VISUAL VARS		--------------------------------------------------------------------- */				protected var _field : TextField;		protected var _format : TextFormat;						protected var dropShadow : DropShadowFilter;		protected var bevel : BevelFilter;						/* ---------------------------------------------------------------------			DEFAULT VALUES		--------------------------------------------------------------------- */				protected var defaultShadowDistance : Number = 4;		protected var defaultShadowAngle : Number = 45;		protected var defaultShadowColor : Number = 0;		protected var defaultShadowAlpha : Number = 1;		protected var defaultShadowBlurX : Number = 4;		protected var defaultShadowBlurY : Number = 4;		protected var defaultShadowStrength : Number = 1;		protected var defaultShadowQuality : Number = 1;								/* ---------------------------------------------------------------------			CONTROL VARS		--------------------------------------------------------------------- */				private var _filters : Array;		private var ownStyle : StyleTxtDAO;								/* ---------------------------------------------------------------------			INITIALIZING		--------------------------------------------------------------------- */				/**		 * Creates a new TxtElement instance.		 */		function TxtElement ()		{			init ();		}				/**		 * Creates an empty TextField.		 */		private function init () : void		{			_field = new TextField();		}								/* ---------------------------------------------------------------------			RENDERING		--------------------------------------------------------------------- */				/**		 * before_render	render the text element.		 */		override public function before_render () : void 		{			var content : String;			var bindExp : String;			var info : LayoutTxtDAO;						super.before_render();						ownStyle = style( ) as StyleTxtDAO;				info = ( this.info as LayoutTxtDAO ); 					// TEXT FORMAT			_format = FontHelper.getFormat( ownStyle.font );			_format.color = ownStyle.color;			_format.size = ownStyle.font_size;			_format.align = ownStyle.text_align;			_format.underline = ownStyle.underline;			_format.leading = ownStyle.leading;						// TEXT FIELD			_field.defaultTextFormat = _format;						_field.multiline = ownStyle.multiline;			_field.selectable = ownStyle.text_select;			_field.autoSize = ownStyle.text_auto_size;						_field.condenseWhite = true;			_field.embedFonts = ( _format.font != null );						_field.antiAliasType = AntiAliasType.ADVANCED;			_field.displayAsPassword = info.password;							if ( ( ! isNaN ( info.maxlength ) ) && info.maxlength > 0 )				_field.maxChars = info.maxlength;						if ( info.restrict && info.restrict.length )				_field.restrict = info.restrict;				// BACKGROUND			if ( ! isNaN( ownStyle.background  ) )			{				_field.background = true; 				_field.backgroundColor = ownStyle.background;			}					// BORDER			if ( ! isNaN( ownStyle.border_color ) || ownStyle.border )			{				_field.border = true; 				_field.borderColor = ( ownStyle.border_color || 0 );			}				// TYPE (input?)			if( ownStyle.input ) {				_field.type = TextFieldType.INPUT;				_field.selectable = true;			}				// WORDWRAP (automatic setting based on width/height usage)			if( ! isNaN( ownStyle.width ) || ! isNaN( ownStyle.height ) ) {				_field.wordWrap = true;			}					// AUTOSIZE (automatic setting based on width/height usage)			if( ! isNaN( ownStyle.width ) && ! isNaN( ownStyle.height ) )				_field.autoSize = TextFieldAutoSize.NONE;					// FILTERS			_field.filters = filters;						// CONTENT			content = info.xml;					// BINDING			for each ( bindExp in StringUtil.enclosure( content, "{", "}" ) )				content = content.replace( bindExp, bind.g ( StringUtil.innerb( bindExp ) ) );					// SETTING TEXT & ADDING			_field.htmlText = content;			sprite.addChild( _field );		}								/* ---------------------------------------------------------------------			GETTERS & SETTERS		--------------------------------------------------------------------- */				/**		 * Gets the element field. 		 * @return	The element field.		 */		public function get field () : TextField		{			return _field;		}				/**		 * Re-format the text field.		 * @param font	Font name.		 * @param size	Font size.		 * @param color	Font color.		 * @param align	Font color.		 * @param underline	If <true>, text is underlined.		 * @param leading	The text leading space between lines.		 */		public function format ( font: String, size : uint = 12, color : uint = 0, align : String = "left", underline : Boolean = false, leading : Object = null ) : void		{			_format = FontHelper.getFormat( font );			_format.color = color;			_format.size = size;			_format.align = align;			_format.underline = underline;			_format.leading = leading;						_field.embedFonts = true;						_field.setTextFormat( _field.defaultTextFormat = _format );		}								/**		 * Sets the field text. 		 * @param text	The text to be setted.		 */		public function set text( text : String ) : void		{			field.text = text;		}				/**		 * Gets the field text.		 * @return	The field text.		 */		public function get text() : String		{			return field.text;		}								/**		 * Sets the field html text. 		 * @param text	The html text to be setted.		 */		public function set html_text( text : String ) : void		{			field.htmlText = text;		}				/**		 * Gets the field html text.		 * @return	The field html text.		 */		public function get html_text() : String		{			return field.htmlText;		}								/**		 * Sets the color text.		 * @param txtColor	Color to be setted.		 */		public function set color( txtColor : uint ) : void		{			_format.color = txtColor;			field.setTextFormat( _format );		}		/**		 * The  current autosize in the Element 		 * @param type	The type of autosize		 */		public function set autosize ( type : String ) : void		{			field.autoSize = type;		}								/* ---------------------------------------------------------------------			APPLYING FILTERS		--------------------------------------------------------------------- */				/**		 * Computes all filters and return it.		 * @return	Apply all filter's styles and return the full array.		 */		private function get filters () : Array		{			// reseting filters array			_filters = new Array();						// applying all filters filters			dropshadow();			// TODO - implement another filters				// glow();				// bevel();				// etc();						// returning the full filters array			return _filters;		}						/**		 * Applies the DropShadow style.		 */		private function dropshadow () : void		{						if ( (	isNaN( ownStyle.drop_shadow_distance ) && 					isNaN( ownStyle.drop_shadow_angle ) && 					isNaN( ownStyle.drop_shadow_color ) && 					isNaN( ownStyle.drop_shadow_alpha ) &&					isNaN( ownStyle.drop_shadow_blurX ) &&					isNaN( ownStyle.drop_shadow_blurY ) &&					isNaN( ownStyle.drop_shadow_strength ) &&					isNaN( ownStyle.drop_shadow_quality )				) ||				(					ownStyle.drop_shadow_inner ||					ownStyle.drop_shadow_knockout ||					ownStyle.drop_shadow_hide )				)			return;						dropShadow = new DropShadowFilter (				( !isNaN( ownStyle.drop_shadow_distance ) ? ownStyle.drop_shadow_distance : defaultShadowDistance ), 				( !isNaN( ownStyle.drop_shadow_angle ) ? ownStyle.drop_shadow_angle : defaultShadowAngle ), 				( !isNaN( ownStyle.drop_shadow_color ) ? ownStyle.drop_shadow_color : defaultShadowColor ), 				( !isNaN( ownStyle.drop_shadow_alpha ) ? ownStyle.drop_shadow_alpha : defaultShadowAlpha ), 				( !isNaN( ownStyle.drop_shadow_blurX ) ? ownStyle.drop_shadow_blurX : defaultShadowBlurX ), 				( !isNaN( ownStyle.drop_shadow_blurY ) ? ownStyle.drop_shadow_blurY : defaultShadowBlurY ), 				( !isNaN( ownStyle.drop_shadow_strength ) ? ownStyle.drop_shadow_strength : defaultShadowStrength ), 				( !isNaN( ownStyle.drop_shadow_quality ) ? ownStyle.drop_shadow_quality : defaultShadowQuality ), 				ownStyle.drop_shadow_inner,				ownStyle.drop_shadow_knockout,				ownStyle.drop_shadow_hide			);						_filters.push( dropShadow );		}	}}