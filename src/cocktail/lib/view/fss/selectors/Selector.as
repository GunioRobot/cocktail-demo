package cocktail.lib.view.fss.selectors {	import cocktail.core.Index;	import cocktail.core.data.bind.Bind;	import cocktail.lib.view.styles.Style;	
		/**	 * Selector base class.	 * @author nybras | nybras@codeine.it	 */	public class Selector extends Index	{		/* ----------------------------------------------------------------------			VARS		---------------------------------------------------------------------- */				protected var _name : String;		protected var _properties : Bind;				protected var _inherit : Style;		protected var _buffer : String;								/* ----------------------------------------------------------------------			READ / WRITE		---------------------------------------------------------------------- */				/**		 * Read some property.		 * @param property	Property name.		 * @return	The property value.		 */		protected function r ( property : String ) : String		{			_buffer = null;						try			{				_buffer = _properties.g( property );			}			catch ( e : Error )			{				_buffer = _inherit._properties.g( property );			}						return _buffer;		}				/**		 * Write some property.		 * @param property	Property name.		 * @param value	Property value.		 */		protected function w ( property : String, value : * ) : *		{			return _properties.s( property, value );		}								/* ----------------------------------------------------------------------			READERS CASTERA		---------------------------------------------------------------------- */				/**		 * Read some variable, casting it as <code>Number</code>.		 * @param property	Property name.		 * @return	Property value as <code>Number</code>.		 */		protected function rn ( property : String ) : uint		{			return Number ( r ( property ) );		}				/**		 * Read some variable, casting it as <code>int</code>.		 * @param property	Property name.		 * @return	Property value as <code>int</code>.		 */		protected function ri ( property : String ) : int		{			return int ( r ( property ) );		}				/**		 * Read some variable, casting it as <code>uint</code>.		 * @param property	Property name.		 * @return	Property value as <code>uint</code>.		 */		protected function ru ( property : String ) : uint		{			return uint ( r ( property ) );		}				/**		 * Read some variable, casting it as <code>Boolean</code>.		 * @param property	Property name.		 * @return	Property value as <code>Boolean</code>.		 */		protected function rb ( property : String ) : Boolean		{			return ( r ( property ) == true || _buffer == "true" );		}	}}